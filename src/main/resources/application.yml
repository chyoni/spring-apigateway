server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    listener:
      direct:
        auto-startup: false
      stream:
        auto-startup: false
      simple:
        auto-startup: false
  cloud:
    gateway:
      routes:
        - id: user-service # route ID
          uri: lb://USER-SERVICE # Eureka 등록된 서비스의 이름 (USER-SERVICE)
          predicates:
            - Path=/user-service/auth/** # API Gateway 로부터 이와 같은 path, method 요청을 따로 명시
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # Request Headers 의 Cookie 삭제
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # API Gateway 로 들어온 요청 /user-service/샬라샬라를 실제 해당 user-service 에 요청할 때 /샬라샬라로 변환해준다.

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=POST, GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
          filters:
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter

        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/actuator/**
            - Method=POST, GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/order-service/(?<segment>.*), /$\{segment}

#        - id: first-service
#          uri: lb://MY-FIRST-SERVICE
#          predicates:
#            - Path=/first-service/**
#          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
#            - CustomFilter

#        - id: second-service
#          uri: lb://MY-SECOND-SERVICE
#          predicates:
#            - Path=/second-service/**
#          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
#            - name: CustomFilter
#            - name: LoggingFilter
#              args:
#                baseMessage: Hi, there.
#                preLogger: true
#                postLogger: true
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, info, metrics, prometheus
#        include: refresh, health, beans, httpexchanges. busrefresh
